import org.springframework.boot.gradle.tasks.bundling.BootJar
import org.springframework.boot.gradle.tasks.run.BootRun

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
}

bootJar.enabled = false
jar.enabled = true

// 모든 프로젝트에 적용
allprojects {
    group = 'com.til'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    repositories {
        mavenCentral()
    }
}

// 서브 프로젝트 전체에 적용
subprojects {
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies { // 공통적으로 사용할 의존성 목록
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-security:3.3.0'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    }

    test {
        useJUnitPlatform()
    }

    bootJar.enabled = true
    jar.enabled = false

    sourceSets { // 서브 모듈에 해당하는 환경변수 경로 연결
        main {
            resources {
                srcDir "${rootProject.projectDir}/configs/${project.name.split('-')[1]}"
                srcDir "${rootProject.projectDir}/db"
            }
        }
    }

    tasks.withType(BootJar).configureEach {
        bootJar.manifest {
            attributes('Spring-Boot-Profile': project.hasProperty('profile') ? project.profile : 'local')
        }
    }

    tasks.withType(BootRun).configureEach {
        doFirst {
            systemProperty 'spring.profiles.active', "${project.hasProperty('profile') ? project.profile : 'local'}"
        }
    }
}
